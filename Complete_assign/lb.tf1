# Create a health check
resource "google_compute_http_health_check" "web_health_check" {
  name               = "web-health-check"
  request_path       = "/"
  port               = "80"
  check_interval_sec = 5
  timeout_sec        = 5
  unhealthy_threshold = 2
  healthy_threshold   = 2
}

# backend service
resource "google_compute_region_backend_service" "backend" {
  name                  = "l7-ilb-backend-subnet"
  region                = var.region
  protocol              = "HTTP"
  load_balancing_scheme = "INTERNAL_MANAGED"
  timeout_sec           = 10
  health_checks         = [google_compute_http_health_check.web_health_check.id]
}
# MIG
resource "google_compute_region_instance_group_manager" "mig" {
  name     = "l7-ilb-mig1"
  provider = google-beta
  region   = "europe-west1"
  version {
    instance_template = google_compute_instance_template.instance_template.id
    name              = "primary"
  }
  base_instance_name = "vm"
  target_size        = 2
}
# instance template
resource "google_compute_instance_template" "instance_template" {
  name         = "l7-ilb-mig-template"
  machine_type = "e2-small"
  tags         = ["http-server"]

  network_interface {
    network    = google_compute_network.ilb_network.id
    subnetwork = google_compute_subnetwork.ilb_subnet.id
    access_config {
      # add external ip to fetch packages
    }
  }
  disk {
    source_image = "debian-cloud/debian-10"
    auto_delete  = true
    boot         = true
  }

  # install nginx and serve a simple web page
  metadata = {
    startup-script = <<-EOF1
      #! /bin/bash
      set -euo pipefail

      export DEBIAN_FRONTEND=noninteractive
      apt-get update
      apt-get install -y nginx-light jq

      NAME=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/hostname")
      IP=$(curl -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip")
      METADATA=$(curl -f -H "Metadata-Flavor: Google" "http://metadata.google.internal/computeMetadata/v1/instance/attributes/?recursive=True" | jq 'del(.["startup-script"])')

      cat <<EOF > /var/www/html/index.html
      <pre>
      Name: $NAME
      IP: $IP
      Metadata: $METADATA
      </pre>
      EOF
    EOF1
  }
  lifecycle {
    create_before_destroy = true
  }
}



resource "google_compute_region_url_map" "urlmap" {
  name            = "lurlmap"
  region          = var.region
  default_service = google_compute_region_backend_service.default.id
}
resource "google_compute_instance_group" "web_instance_group" {
  name        = "web-instance-group"
  description = "Web server instance group"
  zone        = "us-central1-a"

  named_port {
    name = "http"
    port = "80"
  }

  instances = [
    "${google_compute_instance.private_instance.self_link}"
  ]
}

# Create a target pool for the VM instances
resource "google_compute_target_pool" "web_target_pool" {
  name             = "web-target-pool"
  instances         = ["${google_compute_instance.private_instance.self_link}"]
  health_checks    = [google_compute_http_health_check.web_health_check.self_link]
  session_affinity = "CLIENT_IP"
}

# Create a forwarding rule for the load balancer
resource "google_compute_forwarding_rule" "web_forwarding_rule" {
  name               = "web-forwarding-rule"
  load_balancing_scheme = "INTERNAL"
  ip_protocol        = "TCP"
  port_range         = "80"
  target     = "${google_compute_region_instance_group_manager.web_instance_group_manager.instance_group}"
  network            = google_compute_network.vpc.self_link
  subnetwork         = google_compute_subnetwork.regional_subnet.self_link
}

# Create a firewall rule to allow traffic to the load balancer
resource "google_compute_firewall" "web_firewall_rule" {
  name    = "web-firewall-rule"
  network = google_compute_network.vpc.self_link

  allow {
    protocol = "tcp"
    ports    = ["80"]
  }

  source_ranges = ["${google_compute_forwarding_rule.web_forwarding_rule.ip_address}/32"]
}